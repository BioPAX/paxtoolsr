on:
  schedule:
    - cron:  '0 8 * * *'
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: R-CMD-check

jobs:
  check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }}, R ${{ matrix.config.r }}, Java ${{ matrix.config.java }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release', java: 14}
          - {os: windows-latest, r: 'devel', java: 14}
          - {os: macOS-latest, r: 'release', java: 14}
          - {os: macOS-latest, r: 'devel', java: 14}
          - {os: ubuntu-20.04, r: 'release', java: 14}
          - {os: ubuntu-20.04, r: 'devel', java: 14}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          
      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get -yqq install libcurl4-openssl-dev
          
      - uses: r-lib/actions/setup-pandoc@v1

      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.config.java }}

      - name: Query Dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore R Package Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Show Java Info (Linux)
        run: "bash -c 'java -version && which java && echo $PATH && echo $JAVA_HOME'"

      - name: Setup R Java Support
        if: runner.os != 'Windows'
        run: "echo export PATH=$PATH > reconf.sh; echo export JAVA_HOME=$JAVA_HOME >> reconf.sh; echo R CMD javareconf >> reconf.sh; sudo bash reconf.sh"

      - name: Install Dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}
        
      - name: Session Info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}      
        
      - name: Run Check (Linux/macOS)
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        if: runner.os != 'Windows'
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
        
      - name: Run Check (Windows)
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        if: runner.os == 'Windows'
        run: |
          options(crayon.enabled = TRUE)
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran", "--no-multiarch"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

#      - name: R CMD check (Windows)
#        if: runner.os == 'Windows'
#        run: "bash -c 'R CMD check --no-multiarch --no-manual .'"
#
#      - name: R CMD check (Linux)
#        if: runner.os == 'Linux'
#        run: "bash -c 'xvfb-run R CMD check --no-manual .'"
#
#      - name: R CMD check (macOS)
#        if: runner.os == 'macOS'
#        run: "bash -c 'NOAWT=1 R CMD check --no-manual .'"

      - name: Show Install Log
        run: "bash -c 'if [ -e paxtoolsr.Rcheck/00install.out ]; then cat paxtoolsr.Rcheck/00install.out; fi'"

      - name: Upload Check Results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.config.os }}-r${{ matrix.config.r }}-j${{ matrix.config.java }}-results
          path: paxtoolsr.Rcheck

